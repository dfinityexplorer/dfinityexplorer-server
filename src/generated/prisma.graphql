# source: https://dfinity-explorer.herokuapp.com/dfinity-explorer/dev
# timestamp: Sat Mar 16 2019 13:19:41 GMT-0700 (PDT)

type AggregateBlock {
  count: Int!
}

type AggregatePrice {
  count: Int!
}

type AggregateTransaction {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Block implements Node {
  id: ID!
  height: Int!
  timestamp: DateTime!
  transactions(where: TransactionWhereInput, orderBy: TransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Transaction!]
}

"""A connection to a list of items."""
type BlockConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BlockEdge]!
  aggregate: AggregateBlock!
}

input BlockCreateInput {
  height: Int!
  timestamp: DateTime!
  transactions: TransactionCreateManyWithoutBlockInput
}

input BlockCreateOneWithoutTransactionsInput {
  create: BlockCreateWithoutTransactionsInput
  connect: BlockWhereUniqueInput
}

input BlockCreateWithoutTransactionsInput {
  height: Int!
  timestamp: DateTime!
}

"""An edge in a connection."""
type BlockEdge {
  """The item at the end of the edge."""
  node: Block!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BlockOrderByInput {
  id_ASC
  id_DESC
  height_ASC
  height_DESC
  timestamp_ASC
  timestamp_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type BlockPreviousValues {
  id: ID!
  height: Int!
  timestamp: DateTime!
}

type BlockSubscriptionPayload {
  mutation: MutationType!
  node: Block
  updatedFields: [String!]
  previousValues: BlockPreviousValues
}

input BlockSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BlockSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BlockSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BlockSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BlockWhereInput
}

input BlockUpdateInput {
  height: Int
  timestamp: DateTime
  transactions: TransactionUpdateManyWithoutBlockInput
}

input BlockUpdateOneWithoutTransactionsInput {
  create: BlockCreateWithoutTransactionsInput
  connect: BlockWhereUniqueInput
  delete: Boolean
  update: BlockUpdateWithoutTransactionsDataInput
  upsert: BlockUpsertWithoutTransactionsInput
}

input BlockUpdateWithoutTransactionsDataInput {
  height: Int
  timestamp: DateTime
}

input BlockUpsertWithoutTransactionsInput {
  update: BlockUpdateWithoutTransactionsDataInput!
  create: BlockCreateWithoutTransactionsInput!
}

input BlockWhereInput {
  """Logical AND on all given filters."""
  AND: [BlockWhereInput!]

  """Logical OR on all given filters."""
  OR: [BlockWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BlockWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  height: Int

  """All values that are not equal to given value."""
  height_not: Int

  """All values that are contained in given list."""
  height_in: [Int!]

  """All values that are not contained in given list."""
  height_not_in: [Int!]

  """All values less than the given value."""
  height_lt: Int

  """All values less than or equal the given value."""
  height_lte: Int

  """All values greater than the given value."""
  height_gt: Int

  """All values greater than or equal the given value."""
  height_gte: Int
  timestamp: DateTime

  """All values that are not equal to given value."""
  timestamp_not: DateTime

  """All values that are contained in given list."""
  timestamp_in: [DateTime!]

  """All values that are not contained in given list."""
  timestamp_not_in: [DateTime!]

  """All values less than the given value."""
  timestamp_lt: DateTime

  """All values less than or equal the given value."""
  timestamp_lte: DateTime

  """All values greater than the given value."""
  timestamp_gt: DateTime

  """All values greater than or equal the given value."""
  timestamp_gte: DateTime
  transactions_every: TransactionWhereInput
  transactions_some: TransactionWhereInput
  transactions_none: TransactionWhereInput
}

input BlockWhereUniqueInput {
  id: ID
  height: Int
}

scalar DateTime

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createBlock(data: BlockCreateInput!): Block!
  createTransaction(data: TransactionCreateInput!): Transaction!
  createPrice(data: PriceCreateInput!): Price!
  updateBlock(data: BlockUpdateInput!, where: BlockWhereUniqueInput!): Block
  updateTransaction(data: TransactionUpdateInput!, where: TransactionWhereUniqueInput!): Transaction
  deleteBlock(where: BlockWhereUniqueInput!): Block
  deleteTransaction(where: TransactionWhereUniqueInput!): Transaction
  upsertBlock(where: BlockWhereUniqueInput!, create: BlockCreateInput!, update: BlockUpdateInput!): Block!
  upsertTransaction(where: TransactionWhereUniqueInput!, create: TransactionCreateInput!, update: TransactionUpdateInput!): Transaction!
  updateManyBlocks(data: BlockUpdateInput!, where: BlockWhereInput): BatchPayload!
  updateManyTransactions(data: TransactionUpdateInput!, where: TransactionWhereInput): BatchPayload!
  updateManyPrices(data: PriceUpdateInput!, where: PriceWhereInput): BatchPayload!
  deleteManyBlocks(where: BlockWhereInput): BatchPayload!
  deleteManyTransactions(where: TransactionWhereInput): BatchPayload!
  deleteManyPrices(where: PriceWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Price {
  timestamp: DateTime!
  price: Float!
}

"""A connection to a list of items."""
type PriceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PriceEdge]!
  aggregate: AggregatePrice!
}

input PriceCreateInput {
  timestamp: DateTime!
  price: Float!
}

"""An edge in a connection."""
type PriceEdge {
  """The item at the end of the edge."""
  node: Price!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PriceOrderByInput {
  timestamp_ASC
  timestamp_DESC
  price_ASC
  price_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PricePreviousValues {
  timestamp: DateTime!
  price: Float!
}

type PriceSubscriptionPayload {
  mutation: MutationType!
  node: Price
  updatedFields: [String!]
  previousValues: PricePreviousValues
}

input PriceSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PriceSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PriceSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PriceSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PriceWhereInput
}

input PriceUpdateInput {
  timestamp: DateTime
  price: Float
}

input PriceWhereInput {
  """Logical AND on all given filters."""
  AND: [PriceWhereInput!]

  """Logical OR on all given filters."""
  OR: [PriceWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PriceWhereInput!]
  timestamp: DateTime

  """All values that are not equal to given value."""
  timestamp_not: DateTime

  """All values that are contained in given list."""
  timestamp_in: [DateTime!]

  """All values that are not contained in given list."""
  timestamp_not_in: [DateTime!]

  """All values less than the given value."""
  timestamp_lt: DateTime

  """All values less than or equal the given value."""
  timestamp_lte: DateTime

  """All values greater than the given value."""
  timestamp_gt: DateTime

  """All values greater than or equal the given value."""
  timestamp_gte: DateTime
  price: Float

  """All values that are not equal to given value."""
  price_not: Float

  """All values that are contained in given list."""
  price_in: [Float!]

  """All values that are not contained in given list."""
  price_not_in: [Float!]

  """All values less than the given value."""
  price_lt: Float

  """All values less than or equal the given value."""
  price_lte: Float

  """All values greater than the given value."""
  price_gt: Float

  """All values greater than or equal the given value."""
  price_gte: Float
}

type Query {
  blocks(where: BlockWhereInput, orderBy: BlockOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Block]!
  transactions(where: TransactionWhereInput, orderBy: TransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Transaction]!
  prices(where: PriceWhereInput, orderBy: PriceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Price]!
  block(where: BlockWhereUniqueInput!): Block
  transaction(where: TransactionWhereUniqueInput!): Transaction
  blocksConnection(where: BlockWhereInput, orderBy: BlockOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BlockConnection!
  transactionsConnection(where: TransactionWhereInput, orderBy: TransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TransactionConnection!
  pricesConnection(where: PriceWhereInput, orderBy: PriceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PriceConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  block(where: BlockSubscriptionWhereInput): BlockSubscriptionPayload
  transaction(where: TransactionSubscriptionWhereInput): TransactionSubscriptionPayload
  price(where: PriceSubscriptionWhereInput): PriceSubscriptionPayload
}

type Transaction implements Node {
  id: ID!
  hash: String!
  amount: Float!
  block(where: BlockWhereInput): Block!
}

"""A connection to a list of items."""
type TransactionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TransactionEdge]!
  aggregate: AggregateTransaction!
}

input TransactionCreateInput {
  hash: String!
  amount: Float!
  block: BlockCreateOneWithoutTransactionsInput!
}

input TransactionCreateManyWithoutBlockInput {
  create: [TransactionCreateWithoutBlockInput!]
  connect: [TransactionWhereUniqueInput!]
}

input TransactionCreateWithoutBlockInput {
  hash: String!
  amount: Float!
}

"""An edge in a connection."""
type TransactionEdge {
  """The item at the end of the edge."""
  node: Transaction!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TransactionOrderByInput {
  id_ASC
  id_DESC
  hash_ASC
  hash_DESC
  amount_ASC
  amount_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type TransactionPreviousValues {
  id: ID!
  hash: String!
  amount: Float!
}

type TransactionSubscriptionPayload {
  mutation: MutationType!
  node: Transaction
  updatedFields: [String!]
  previousValues: TransactionPreviousValues
}

input TransactionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TransactionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TransactionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TransactionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TransactionWhereInput
}

input TransactionUpdateInput {
  hash: String
  amount: Float
  block: BlockUpdateOneWithoutTransactionsInput
}

input TransactionUpdateManyWithoutBlockInput {
  create: [TransactionCreateWithoutBlockInput!]
  connect: [TransactionWhereUniqueInput!]
  disconnect: [TransactionWhereUniqueInput!]
  delete: [TransactionWhereUniqueInput!]
  update: [TransactionUpdateWithWhereUniqueWithoutBlockInput!]
  upsert: [TransactionUpsertWithWhereUniqueWithoutBlockInput!]
}

input TransactionUpdateWithoutBlockDataInput {
  hash: String
  amount: Float
}

input TransactionUpdateWithWhereUniqueWithoutBlockInput {
  where: TransactionWhereUniqueInput!
  data: TransactionUpdateWithoutBlockDataInput!
}

input TransactionUpsertWithWhereUniqueWithoutBlockInput {
  where: TransactionWhereUniqueInput!
  update: TransactionUpdateWithoutBlockDataInput!
  create: TransactionCreateWithoutBlockInput!
}

input TransactionWhereInput {
  """Logical AND on all given filters."""
  AND: [TransactionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TransactionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TransactionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  hash: String

  """All values that are not equal to given value."""
  hash_not: String

  """All values that are contained in given list."""
  hash_in: [String!]

  """All values that are not contained in given list."""
  hash_not_in: [String!]

  """All values less than the given value."""
  hash_lt: String

  """All values less than or equal the given value."""
  hash_lte: String

  """All values greater than the given value."""
  hash_gt: String

  """All values greater than or equal the given value."""
  hash_gte: String

  """All values containing the given string."""
  hash_contains: String

  """All values not containing the given string."""
  hash_not_contains: String

  """All values starting with the given string."""
  hash_starts_with: String

  """All values not starting with the given string."""
  hash_not_starts_with: String

  """All values ending with the given string."""
  hash_ends_with: String

  """All values not ending with the given string."""
  hash_not_ends_with: String
  amount: Float

  """All values that are not equal to given value."""
  amount_not: Float

  """All values that are contained in given list."""
  amount_in: [Float!]

  """All values that are not contained in given list."""
  amount_not_in: [Float!]

  """All values less than the given value."""
  amount_lt: Float

  """All values less than or equal the given value."""
  amount_lte: Float

  """All values greater than the given value."""
  amount_gt: Float

  """All values greater than or equal the given value."""
  amount_gte: Float
  block: BlockWhereInput
}

input TransactionWhereUniqueInput {
  id: ID
  hash: String
}
