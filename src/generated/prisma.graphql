type AggregateBlock {
  count: Int!
}

type AggregateDailyNetworkStats {
  count: Int!
}

type AggregateNetworkStats {
  count: Int!
}

type AggregatePrice {
  count: Int!
}

type AggregateTransaction {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Block {
  id: ID!
  createdAt: DateTime!
  height: Int!
  timestamp: DateTime!
  transactions(where: TransactionWhereInput, orderBy: TransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Transaction!]
}

type BlockConnection {
  pageInfo: PageInfo!
  edges: [BlockEdge]!
  aggregate: AggregateBlock!
}

input BlockCreateInput {
  id: ID
  height: Int!
  timestamp: DateTime!
  transactions: TransactionCreateManyWithoutBlockInput
}

input BlockCreateOneWithoutTransactionsInput {
  create: BlockCreateWithoutTransactionsInput
  connect: BlockWhereUniqueInput
}

input BlockCreateWithoutTransactionsInput {
  id: ID
  height: Int!
  timestamp: DateTime!
}

type BlockEdge {
  node: Block!
  cursor: String!
}

enum BlockOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  height_ASC
  height_DESC
  timestamp_ASC
  timestamp_DESC
}

type BlockPreviousValues {
  id: ID!
  createdAt: DateTime!
  height: Int!
  timestamp: DateTime!
}

type BlockSubscriptionPayload {
  mutation: MutationType!
  node: Block
  updatedFields: [String!]
  previousValues: BlockPreviousValues
}

input BlockSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BlockWhereInput
  AND: [BlockSubscriptionWhereInput!]
  OR: [BlockSubscriptionWhereInput!]
  NOT: [BlockSubscriptionWhereInput!]
}

input BlockUpdateInput {
  height: Int
  timestamp: DateTime
  transactions: TransactionUpdateManyWithoutBlockInput
}

input BlockUpdateManyMutationInput {
  height: Int
  timestamp: DateTime
}

input BlockUpdateOneRequiredWithoutTransactionsInput {
  create: BlockCreateWithoutTransactionsInput
  update: BlockUpdateWithoutTransactionsDataInput
  upsert: BlockUpsertWithoutTransactionsInput
  connect: BlockWhereUniqueInput
}

input BlockUpdateWithoutTransactionsDataInput {
  height: Int
  timestamp: DateTime
}

input BlockUpsertWithoutTransactionsInput {
  update: BlockUpdateWithoutTransactionsDataInput!
  create: BlockCreateWithoutTransactionsInput!
}

input BlockWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  height: Int
  height_not: Int
  height_in: [Int!]
  height_not_in: [Int!]
  height_lt: Int
  height_lte: Int
  height_gt: Int
  height_gte: Int
  timestamp: DateTime
  timestamp_not: DateTime
  timestamp_in: [DateTime!]
  timestamp_not_in: [DateTime!]
  timestamp_lt: DateTime
  timestamp_lte: DateTime
  timestamp_gt: DateTime
  timestamp_gte: DateTime
  transactions_every: TransactionWhereInput
  transactions_some: TransactionWhereInput
  transactions_none: TransactionWhereInput
  AND: [BlockWhereInput!]
  OR: [BlockWhereInput!]
  NOT: [BlockWhereInput!]
}

input BlockWhereUniqueInput {
  id: ID
  height: Int
}

enum Currency {
  DFN
}

type DailyNetworkStats {
  id: ID!
  date: DateTime!
  numBlocks: Int!
  numTransactions: Int!
}

type DailyNetworkStatsConnection {
  pageInfo: PageInfo!
  edges: [DailyNetworkStatsEdge]!
  aggregate: AggregateDailyNetworkStats!
}

input DailyNetworkStatsCreateInput {
  id: ID
  date: DateTime!
  numBlocks: Int!
  numTransactions: Int!
}

type DailyNetworkStatsEdge {
  node: DailyNetworkStats!
  cursor: String!
}

enum DailyNetworkStatsOrderByInput {
  id_ASC
  id_DESC
  date_ASC
  date_DESC
  numBlocks_ASC
  numBlocks_DESC
  numTransactions_ASC
  numTransactions_DESC
}

type DailyNetworkStatsPreviousValues {
  id: ID!
  date: DateTime!
  numBlocks: Int!
  numTransactions: Int!
}

type DailyNetworkStatsSubscriptionPayload {
  mutation: MutationType!
  node: DailyNetworkStats
  updatedFields: [String!]
  previousValues: DailyNetworkStatsPreviousValues
}

input DailyNetworkStatsSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DailyNetworkStatsWhereInput
  AND: [DailyNetworkStatsSubscriptionWhereInput!]
  OR: [DailyNetworkStatsSubscriptionWhereInput!]
  NOT: [DailyNetworkStatsSubscriptionWhereInput!]
}

input DailyNetworkStatsUpdateInput {
  date: DateTime
  numBlocks: Int
  numTransactions: Int
}

input DailyNetworkStatsUpdateManyMutationInput {
  date: DateTime
  numBlocks: Int
  numTransactions: Int
}

input DailyNetworkStatsWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  numBlocks: Int
  numBlocks_not: Int
  numBlocks_in: [Int!]
  numBlocks_not_in: [Int!]
  numBlocks_lt: Int
  numBlocks_lte: Int
  numBlocks_gt: Int
  numBlocks_gte: Int
  numTransactions: Int
  numTransactions_not: Int
  numTransactions_in: [Int!]
  numTransactions_not_in: [Int!]
  numTransactions_lt: Int
  numTransactions_lte: Int
  numTransactions_gt: Int
  numTransactions_gte: Int
  AND: [DailyNetworkStatsWhereInput!]
  OR: [DailyNetworkStatsWhereInput!]
  NOT: [DailyNetworkStatsWhereInput!]
}

input DailyNetworkStatsWhereUniqueInput {
  id: ID
  date: DateTime
}

scalar DateTime

enum Duration {
  MINUTES_10
}

scalar Long

type Mutation {
  createBlock(data: BlockCreateInput!): Block!
  updateBlock(data: BlockUpdateInput!, where: BlockWhereUniqueInput!): Block
  updateManyBlocks(data: BlockUpdateManyMutationInput!, where: BlockWhereInput): BatchPayload!
  upsertBlock(where: BlockWhereUniqueInput!, create: BlockCreateInput!, update: BlockUpdateInput!): Block!
  deleteBlock(where: BlockWhereUniqueInput!): Block
  deleteManyBlocks(where: BlockWhereInput): BatchPayload!
  createDailyNetworkStats(data: DailyNetworkStatsCreateInput!): DailyNetworkStats!
  updateDailyNetworkStats(data: DailyNetworkStatsUpdateInput!, where: DailyNetworkStatsWhereUniqueInput!): DailyNetworkStats
  updateManyDailyNetworkStatses(data: DailyNetworkStatsUpdateManyMutationInput!, where: DailyNetworkStatsWhereInput): BatchPayload!
  upsertDailyNetworkStats(where: DailyNetworkStatsWhereUniqueInput!, create: DailyNetworkStatsCreateInput!, update: DailyNetworkStatsUpdateInput!): DailyNetworkStats!
  deleteDailyNetworkStats(where: DailyNetworkStatsWhereUniqueInput!): DailyNetworkStats
  deleteManyDailyNetworkStatses(where: DailyNetworkStatsWhereInput): BatchPayload!
  createNetworkStats(data: NetworkStatsCreateInput!): NetworkStats!
  updateNetworkStats(data: NetworkStatsUpdateInput!, where: NetworkStatsWhereUniqueInput!): NetworkStats
  updateManyNetworkStatses(data: NetworkStatsUpdateManyMutationInput!, where: NetworkStatsWhereInput): BatchPayload!
  upsertNetworkStats(where: NetworkStatsWhereUniqueInput!, create: NetworkStatsCreateInput!, update: NetworkStatsUpdateInput!): NetworkStats!
  deleteNetworkStats(where: NetworkStatsWhereUniqueInput!): NetworkStats
  deleteManyNetworkStatses(where: NetworkStatsWhereInput): BatchPayload!
  createPrice(data: PriceCreateInput!): Price!
  updatePrice(data: PriceUpdateInput!, where: PriceWhereUniqueInput!): Price
  updateManyPrices(data: PriceUpdateManyMutationInput!, where: PriceWhereInput): BatchPayload!
  upsertPrice(where: PriceWhereUniqueInput!, create: PriceCreateInput!, update: PriceUpdateInput!): Price!
  deletePrice(where: PriceWhereUniqueInput!): Price
  deleteManyPrices(where: PriceWhereInput): BatchPayload!
  createTransaction(data: TransactionCreateInput!): Transaction!
  updateTransaction(data: TransactionUpdateInput!, where: TransactionWhereUniqueInput!): Transaction
  updateManyTransactions(data: TransactionUpdateManyMutationInput!, where: TransactionWhereInput): BatchPayload!
  upsertTransaction(where: TransactionWhereUniqueInput!, create: TransactionCreateInput!, update: TransactionUpdateInput!): Transaction!
  deleteTransaction(where: TransactionWhereUniqueInput!): Transaction
  deleteManyTransactions(where: TransactionWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

type NetworkStats {
  id: ID!
  duration: Duration!
  secondsPerBlock: Float!
  transactionsPerSecond: Float!
}

type NetworkStatsConnection {
  pageInfo: PageInfo!
  edges: [NetworkStatsEdge]!
  aggregate: AggregateNetworkStats!
}

input NetworkStatsCreateInput {
  id: ID
  duration: Duration!
  secondsPerBlock: Float!
  transactionsPerSecond: Float!
}

type NetworkStatsEdge {
  node: NetworkStats!
  cursor: String!
}

enum NetworkStatsOrderByInput {
  id_ASC
  id_DESC
  duration_ASC
  duration_DESC
  secondsPerBlock_ASC
  secondsPerBlock_DESC
  transactionsPerSecond_ASC
  transactionsPerSecond_DESC
}

type NetworkStatsPreviousValues {
  id: ID!
  duration: Duration!
  secondsPerBlock: Float!
  transactionsPerSecond: Float!
}

type NetworkStatsSubscriptionPayload {
  mutation: MutationType!
  node: NetworkStats
  updatedFields: [String!]
  previousValues: NetworkStatsPreviousValues
}

input NetworkStatsSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: NetworkStatsWhereInput
  AND: [NetworkStatsSubscriptionWhereInput!]
  OR: [NetworkStatsSubscriptionWhereInput!]
  NOT: [NetworkStatsSubscriptionWhereInput!]
}

input NetworkStatsUpdateInput {
  duration: Duration
  secondsPerBlock: Float
  transactionsPerSecond: Float
}

input NetworkStatsUpdateManyMutationInput {
  duration: Duration
  secondsPerBlock: Float
  transactionsPerSecond: Float
}

input NetworkStatsWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  duration: Duration
  duration_not: Duration
  duration_in: [Duration!]
  duration_not_in: [Duration!]
  secondsPerBlock: Float
  secondsPerBlock_not: Float
  secondsPerBlock_in: [Float!]
  secondsPerBlock_not_in: [Float!]
  secondsPerBlock_lt: Float
  secondsPerBlock_lte: Float
  secondsPerBlock_gt: Float
  secondsPerBlock_gte: Float
  transactionsPerSecond: Float
  transactionsPerSecond_not: Float
  transactionsPerSecond_in: [Float!]
  transactionsPerSecond_not_in: [Float!]
  transactionsPerSecond_lt: Float
  transactionsPerSecond_lte: Float
  transactionsPerSecond_gt: Float
  transactionsPerSecond_gte: Float
  AND: [NetworkStatsWhereInput!]
  OR: [NetworkStatsWhereInput!]
  NOT: [NetworkStatsWhereInput!]
}

input NetworkStatsWhereUniqueInput {
  id: ID
  duration: Duration
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Price {
  id: ID!
  currency: Currency!
  price: Float!
}

type PriceConnection {
  pageInfo: PageInfo!
  edges: [PriceEdge]!
  aggregate: AggregatePrice!
}

input PriceCreateInput {
  id: ID
  currency: Currency!
  price: Float!
}

type PriceEdge {
  node: Price!
  cursor: String!
}

enum PriceOrderByInput {
  id_ASC
  id_DESC
  currency_ASC
  currency_DESC
  price_ASC
  price_DESC
}

type PricePreviousValues {
  id: ID!
  currency: Currency!
  price: Float!
}

type PriceSubscriptionPayload {
  mutation: MutationType!
  node: Price
  updatedFields: [String!]
  previousValues: PricePreviousValues
}

input PriceSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PriceWhereInput
  AND: [PriceSubscriptionWhereInput!]
  OR: [PriceSubscriptionWhereInput!]
  NOT: [PriceSubscriptionWhereInput!]
}

input PriceUpdateInput {
  currency: Currency
  price: Float
}

input PriceUpdateManyMutationInput {
  currency: Currency
  price: Float
}

input PriceWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  currency: Currency
  currency_not: Currency
  currency_in: [Currency!]
  currency_not_in: [Currency!]
  price: Float
  price_not: Float
  price_in: [Float!]
  price_not_in: [Float!]
  price_lt: Float
  price_lte: Float
  price_gt: Float
  price_gte: Float
  AND: [PriceWhereInput!]
  OR: [PriceWhereInput!]
  NOT: [PriceWhereInput!]
}

input PriceWhereUniqueInput {
  id: ID
  currency: Currency
}

type Query {
  block(where: BlockWhereUniqueInput!): Block
  blocks(where: BlockWhereInput, orderBy: BlockOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Block]!
  blocksConnection(where: BlockWhereInput, orderBy: BlockOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BlockConnection!
  dailyNetworkStats(where: DailyNetworkStatsWhereUniqueInput!): DailyNetworkStats
  dailyNetworkStatses(where: DailyNetworkStatsWhereInput, orderBy: DailyNetworkStatsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [DailyNetworkStats]!
  dailyNetworkStatsesConnection(where: DailyNetworkStatsWhereInput, orderBy: DailyNetworkStatsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DailyNetworkStatsConnection!
  networkStats(where: NetworkStatsWhereUniqueInput!): NetworkStats
  networkStatses(where: NetworkStatsWhereInput, orderBy: NetworkStatsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [NetworkStats]!
  networkStatsesConnection(where: NetworkStatsWhereInput, orderBy: NetworkStatsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NetworkStatsConnection!
  price(where: PriceWhereUniqueInput!): Price
  prices(where: PriceWhereInput, orderBy: PriceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Price]!
  pricesConnection(where: PriceWhereInput, orderBy: PriceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PriceConnection!
  transaction(where: TransactionWhereUniqueInput!): Transaction
  transactions(where: TransactionWhereInput, orderBy: TransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Transaction]!
  transactionsConnection(where: TransactionWhereInput, orderBy: TransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TransactionConnection!
  node(id: ID!): Node
}

type Subscription {
  block(where: BlockSubscriptionWhereInput): BlockSubscriptionPayload
  dailyNetworkStats(where: DailyNetworkStatsSubscriptionWhereInput): DailyNetworkStatsSubscriptionPayload
  networkStats(where: NetworkStatsSubscriptionWhereInput): NetworkStatsSubscriptionPayload
  price(where: PriceSubscriptionWhereInput): PriceSubscriptionPayload
  transaction(where: TransactionSubscriptionWhereInput): TransactionSubscriptionPayload
}

type Transaction {
  id: ID!
  createdAt: DateTime!
  hash: String!
  amount: Float!
  block: Block!
}

type TransactionConnection {
  pageInfo: PageInfo!
  edges: [TransactionEdge]!
  aggregate: AggregateTransaction!
}

input TransactionCreateInput {
  id: ID
  hash: String!
  amount: Float!
  block: BlockCreateOneWithoutTransactionsInput!
}

input TransactionCreateManyWithoutBlockInput {
  create: [TransactionCreateWithoutBlockInput!]
  connect: [TransactionWhereUniqueInput!]
}

input TransactionCreateWithoutBlockInput {
  id: ID
  hash: String!
  amount: Float!
}

type TransactionEdge {
  node: Transaction!
  cursor: String!
}

enum TransactionOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  hash_ASC
  hash_DESC
  amount_ASC
  amount_DESC
}

type TransactionPreviousValues {
  id: ID!
  createdAt: DateTime!
  hash: String!
  amount: Float!
}

input TransactionScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  hash: String
  hash_not: String
  hash_in: [String!]
  hash_not_in: [String!]
  hash_lt: String
  hash_lte: String
  hash_gt: String
  hash_gte: String
  hash_contains: String
  hash_not_contains: String
  hash_starts_with: String
  hash_not_starts_with: String
  hash_ends_with: String
  hash_not_ends_with: String
  amount: Float
  amount_not: Float
  amount_in: [Float!]
  amount_not_in: [Float!]
  amount_lt: Float
  amount_lte: Float
  amount_gt: Float
  amount_gte: Float
  AND: [TransactionScalarWhereInput!]
  OR: [TransactionScalarWhereInput!]
  NOT: [TransactionScalarWhereInput!]
}

type TransactionSubscriptionPayload {
  mutation: MutationType!
  node: Transaction
  updatedFields: [String!]
  previousValues: TransactionPreviousValues
}

input TransactionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TransactionWhereInput
  AND: [TransactionSubscriptionWhereInput!]
  OR: [TransactionSubscriptionWhereInput!]
  NOT: [TransactionSubscriptionWhereInput!]
}

input TransactionUpdateInput {
  hash: String
  amount: Float
  block: BlockUpdateOneRequiredWithoutTransactionsInput
}

input TransactionUpdateManyDataInput {
  hash: String
  amount: Float
}

input TransactionUpdateManyMutationInput {
  hash: String
  amount: Float
}

input TransactionUpdateManyWithoutBlockInput {
  create: [TransactionCreateWithoutBlockInput!]
  delete: [TransactionWhereUniqueInput!]
  connect: [TransactionWhereUniqueInput!]
  set: [TransactionWhereUniqueInput!]
  disconnect: [TransactionWhereUniqueInput!]
  update: [TransactionUpdateWithWhereUniqueWithoutBlockInput!]
  upsert: [TransactionUpsertWithWhereUniqueWithoutBlockInput!]
  deleteMany: [TransactionScalarWhereInput!]
  updateMany: [TransactionUpdateManyWithWhereNestedInput!]
}

input TransactionUpdateManyWithWhereNestedInput {
  where: TransactionScalarWhereInput!
  data: TransactionUpdateManyDataInput!
}

input TransactionUpdateWithoutBlockDataInput {
  hash: String
  amount: Float
}

input TransactionUpdateWithWhereUniqueWithoutBlockInput {
  where: TransactionWhereUniqueInput!
  data: TransactionUpdateWithoutBlockDataInput!
}

input TransactionUpsertWithWhereUniqueWithoutBlockInput {
  where: TransactionWhereUniqueInput!
  update: TransactionUpdateWithoutBlockDataInput!
  create: TransactionCreateWithoutBlockInput!
}

input TransactionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  hash: String
  hash_not: String
  hash_in: [String!]
  hash_not_in: [String!]
  hash_lt: String
  hash_lte: String
  hash_gt: String
  hash_gte: String
  hash_contains: String
  hash_not_contains: String
  hash_starts_with: String
  hash_not_starts_with: String
  hash_ends_with: String
  hash_not_ends_with: String
  amount: Float
  amount_not: Float
  amount_in: [Float!]
  amount_not_in: [Float!]
  amount_lt: Float
  amount_lte: Float
  amount_gt: Float
  amount_gte: Float
  block: BlockWhereInput
  AND: [TransactionWhereInput!]
  OR: [TransactionWhereInput!]
  NOT: [TransactionWhereInput!]
}

input TransactionWhereUniqueInput {
  id: ID
  hash: String
}
