###
 # @file schema.graphql
 # @copyright Copyright (c) 2018-2019 Dylan Miller and dfinityexplorer contributors
 # @license MIT License
 ##

# import BlockOrderByInput, BlockSubscriptionPayload, TransactionOrderByInput, TransactionSubscriptionPayload, DailyNetworkStatsOrderByInput, NetworkStatsSubscriptionPayload, PriceSubscriptionPayload from "./generated/prisma.graphql"

# Queries
type Query {
  blocks(first: Int, orderBy: BlockOrderByInput): [Block!]!
  block(height: Int!): Block
  transactions(first: Int, orderBy: TransactionOrderByInput): [Transaction!]!
  transaction(hash: String!): Transaction
  searchGetType(query: String!): SearchGetTypeResult!
  searchAutoComplete(query: String!, first: Int): SearchAutoCompleteResult!
  dailyNetworkStatses(last: Int, orderBy: DailyNetworkStatsOrderByInput): [DailyNetworkStats]!
  networkStats: NetworkStats!
  price: Price!
}

# Mutations
# Do not expose mutations on deployed server.
# type Mutation {
#  createBlock(height: Int!, timestamp: String!): Block!
#  createTransaction(hash: String!, amount: Float!, blockId: ID!): Transaction!
# }

# Subscriptions
type Subscription {
  block: BlockSubscriptionPayload
  transaction: TransactionSubscriptionPayload
  networkStats: NetworkStatsSubscriptionPayload
  price: PriceSubscriptionPayload
}

# An interface which custom types should implement.
interface Node {
  id: ID!
}

# Represents a DFINITY block.
type Block implements Node {
  id: ID!
  height: Int!
  timestamp: String!
  transactions: [Transaction!]!
  numTransactions: Int!
}

# Represents a DFINITY transaction.
type Transaction implements Node {
  id: ID!
  hash: String!
  amount: Float!
  block: Block!
}

# Represents daily DFINITY network stats.
type DailyNetworkStats {
  date: DateTime!
  numBlocks: Int!
  numTransactions: Int!
}

# Represents current DFINITY network stats.
type NetworkStats {
  secondsPerBlock: Float!
  transactionsPerSecond: Float!
}

# Represents the current DFN price.
type Price {
  price: Float!
}

# Holds a searchGetType result.
type SearchGetTypeResult {
  type: String!
}

# Holds a searchAutoComplete result.
type SearchAutoCompleteResult {
  items: [String!]!
}
